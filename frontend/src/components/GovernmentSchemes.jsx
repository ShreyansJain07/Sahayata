// Import necessary dependencies
import React, { useState } from "react";
import {
  Box,
  Checkbox,
  CheckboxGroup,
  Button,
  Spinner,
  Center,
  Heading,
  Divider,
  CardBody,
  Card,
  CardHeader,
  CardFooter,
  Text,
} from "@chakra-ui/react";
import axios from "axios";

const apiUrl = "https://ai-endpoint-ritojnan.vercel.app/generatetext";



const DisplaySchemeDetails = ({ schemeData }) => {
  const parseSchemeDetails = (data) => {
    const sections = data.split('\n\n');
    
    return sections.map((section, index) => {
      const lines = section.split('\n');
      const title = lines[0].replace('**', '').replace('**', '');
      const content = lines.slice(1).join('\n');

      return (
        <div key={index} style={{ marginBottom: '20px' }}>
          <h2>{title}</h2>
          <p>{content}</p>
        </div>
      );
    });
  };

  return (
    <div>
      {parseSchemeDetails(schemeData)}
    </div>
  );
};




const MyForm = () => {
  const [selectedConditions, setSelectedConditions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [isloaded, setIsLoaded] = useState(false);
  const [responsestr, setResponsestr] = useState("");
  const handleCheckboxChange = (selected) => {
    setSelectedConditions(selected);
  };

  const makeApiCall = async () => {
    setLoading(true);

    try {
      const postData = {
        promptString: `[CONDITIONS ${selectedConditions.join(
          ", "
        )}]<h1> Government Schemes you can avail in India<h1> are in the format <br><h2>[NAME]</h2><p>[DESCRIPTION]</p>`,
      };

      const response = await axios.post(apiUrl, postData, {
        headers: {
          "Content-Type": "application/json",
        },
      });

      console.log("API response:", response.data);
setResponsestr(response.data.generatedText);
      // Handle the response as needed, e.g., update state to display the output
    } catch (error) {
      console.error("Error making API call:", error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box p={4} mt={[12, 24]}>
      <Center>
        <Heading>Government Schemes you can avail </Heading>
      </Center>
      <Divider m={4} />
      <Card>
        <CardHeader>
          <Heading size="md">Do you have any of these</Heading>
        </CardHeader>
        <CardBody>
          <CheckboxGroup
            onChange={handleCheckboxChange}
            value={selectedConditions}
          >
            <Box>
              <Checkbox value="aadhar">1. Aadhar Card</Checkbox>
            </Box>
            <Box>
              <Checkbox value="incomeCertificate">
                2. Income Certificate
              </Checkbox>
            </Box>
            <Box>
              <Checkbox value="pregnantWoman">3. Pregnant Woman</Checkbox>
            </Box>
            <Box>
              <Checkbox value="businessPlan">4. Business Plan</Checkbox>
            </Box>
            <Box>
              <Checkbox value="homeLoan">5. Home Loan</Checkbox>
            </Box>
            <Box>
              <Checkbox value="educationGrant">6. Education Grant</Checkbox>
            </Box>
            <Box>
              <Checkbox value="jobTraining">7. Job Training Program</Checkbox>
            </Box>
            <Box>
              <Checkbox value="seniorCitizenBenefit">
                8. Senior Citizen Benefit
              </Checkbox>
            </Box>
            <Box>
              <Checkbox value="agricultureSupport">
                9. Agriculture Support
              </Checkbox>
            </Box>
            {/* Add more checkboxes as needed */}
          </CheckboxGroup>
        </CardBody>
        <CardFooter>
          <Button
            mt={4}
            colorScheme="orange"
            onClick={makeApiCall}
            isDisabled={loading || selectedConditions.length === 0}
          >
            {loading ? <Spinner size="sm" /> : "Continue"}
          </Button>
        </CardFooter>
      </Card>
      <Card mt={[4, 8]} p={[2, 4]}>
        <Center>
            
              {loading ? (
                <Spinner colorScheme="orange" size="xl" />
              ) : (
                <Box>
      <DisplaySchemeDetails schemeData={responsestr} />
                </Box>
              )}
            
        </Center>
        <CardFooter>
        <Text size={"sm"} color={"gray.500"}>*Following data is generated by GenAI</Text>

        </CardFooter>
      </Card>
    </Box>
  );
};

export default MyForm;
